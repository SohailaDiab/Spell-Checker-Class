# -*- coding: utf-8 -*-
"""Spelling Checker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RjSmpP1lj-zrz_qTMJpQPJdRK84heG3q

# Task 1 - Spelling Checker
Using this dictionary, implement a spell checker class that takes this dictionary as input, this
class has three main operations:
- Store this dictionary in a suitable data structure.
- Take an input word and return the nearest 4 words if this word is not in the dictionary
- Take an input word and add this word to the dictionary

For each operation specify the time and space complexity.

*Note: You could assume that the nearest 4 words from a word are the 2 words before and after this word in lexicographic order if they exist.*

## Function
"""

class SpellChecker:
  def __init__(self, file_path):

    with open(file_path, 'r', encoding='utf-8') as file:
        self.dictionary = [line.strip() for line in file.readlines()]
    print(f'There are {len(self.dictionary)} words.')

  def binary_search(self, dict_arr, word, start, end, for_insertion=False):
    """
    Time Complexity: O(log(N))
    Space Complexity: O(log(N))

    Binary Search Function.
    """
    if end >= start:
      mid = start + (end-start)//2
      # Found word in dict
      if dict_arr[mid] == word:
        return [mid]
      # Search in left half
      elif dict_arr[mid] > word:
        return self.binary_search(dict_arr, word, start, mid-1, for_insertion)
      # Search in right half
      else:
        return self.binary_search(dict_arr, word, mid+1, end, for_insertion)
    # The word was not found in the dictionary
    else:
      # If the binary search was done with the purpose of insertion, return where the word should be inserted
      if for_insertion:
        return [start, -1]
      # Find the 4 words near the given word
      else:
        # Exception handling: If the given word has less than 4 words near it
        # If word is supposed to be in index 1
        if end==0 and start==1:
          return [dict_arr[end], dict_arr[start], dict_arr[start+1]]
        # If word is supposed to be in index 0
        elif end==-1 and start==0:
          return [dict_arr[start], dict_arr[start+1]]
        # If word is supposed to be before the last
        elif end==len(self.dictionary)-2 and start==len(self.dictionary)-1:
          return [dict_arr[end-1], dict_arr[end], dict_arr[start]]
        # If word is supposed to be the last
        elif end==len(self.dictionary)-1 and start==len(self.dictionary):
          return [dict_arr[end-1], dict_arr[end]]
        # If there are 4 words near given word
        else:
          return[dict_arr[end-1], dict_arr[end], dict_arr[start], dict_arr[start+1]]


  def lookup(self, word):
    """
    Time Complexity: O(log(N))
    Space Complexity: O(1)

    Takes an input word and return the nearest 4 words (2 before and 2 after)
    if this word is not in the dictionary.
    If there are no 4 words found, return at least 2.
    Args:
        word: str
    Returns:
        word's position in dictionary, or nearest 4 words if not in dictionary
    """
    start, end = 0, len(self.dictionary)-1
    search = self.binary_search(self.dictionary, word, start, end) # logn

    if len(search)==1:
      print(f'Found {word} at index {search[0]}.')
    else:
      print(f'{word} was not found in the dictionary.')
      print(f'The nearest {len(search)} words in lexicographic order are:')
      for words_near in search:
        print(words_near)

  def add(self, word):
    """
    Time Complexity: O(N)
    Space Complexity: O(1)

    Takes an input word and adds this word to the dictionary
    Args:
        word: str
    """
    start, end = 0, len(self.dictionary)-1
    insertion_idx = self.binary_search(self.dictionary, word, start, end, True)

    if len(insertion_idx)==1:
      print(f"{word} is already in the dictionary at index {insertion_idx[0]}.")
      print(self.dictionary[insertion_idx[0]])
    else:
      self.dictionary.insert(insertion_idx[0], word)
      print(f"Inserted {word} at index {insertion_idx[0]}.")

  def print_dict(self):
    """ Prints the dictionary. """
    print(self.dictionary)

"""## Run"""

file_path = '/content/dictionary.txt'

while True:
  file_path = input("Enter the file path: ")
  try:
    spellchecker = SpellChecker(file_path)
  except FileNotFoundError:
    print("Wrong file or file path ... Please try again.\n")
  except UnicodeDecodeError:
    print("Please input a file that is utf-8 encoded.\n")
  else:
      break
while True:
  print()
  operation = input("Please type a number: "
                    "\n1. Take an input word and return the nearest 4 words if this word is not in the dictionary."
                    "\n2. Take an input word and add this word to the dictionary."
                    "\n3. Print dictionary."
                    "\n4. Exit.\n")
  match operation:
    case '1':
      word = input("Enter a word look up in the dictionary: ")
      spellchecker.lookup(word)
    case '2':
      word = input("Enter a word to add to the dictionary: ")
      spellchecker.lookup(word)
    case '3':
      spellchecker.print_dict()
    case '4':
      break
    case _:
      print("Incorrect input. Please try again.\n")